# su dung app name lam duong dan
spring.application.name=USER-SERVICE
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.instance.prefer-ip-address=true
eureka.client.fetch-registry=true
spring.cloud.compatibility-verifier.enabled=false

logging.level.root = INFO
server.port=8082

spring.datasource.url= jdbc:postgresql://localhost:5432/micro_udemy
spring.datasource.username= postgres
spring.datasource.password= vnext@1234

spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

sender.email=harrnguyen610@gmail.com

app.jwt-secret=daf66e01593f61a15b857cf433aae03a005812b31234e149036bcc8dee755dbb
app-jwt-expiration-milliseconds=604800000

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# exposes all actuator endpoints


#logging
spring.cloud.openfeign.circuitbreaker.enabled=true
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
spring.cloud.openfeign.micrometer.enabled=true
management.tracing.sampling.probability=0.1
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

# oauth 2 security
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/springcloud
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/realms/springcloud/protocol/openid-connect/certs

# circuit breaker
spring.cloud.circuitbreaker.enabled=true

spring.cloud.circuitbreaker.circuitBreaker.getUserById.threshold=5
spring.cloud.circuitbreaker.circuitBreaker.getUserById.timeout=10000
spring.cloud.circuitbreaker.circuitBreaker.getUserById.failureRateThreshold=0.5

# cache
spring.cache.cache-names=rate-limit-buckets
spring.cache.caffeine.spec=maximumSize=100000,expireAfterAccess=3600s

# bucket4j
bucket4j.enabled=true

management.health.circuitbreakers.enabled=true
management.health.ratelimiters.enabled=true
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=*

#circuit breaker properties

resilience4j.circuitbreaker.instances.travelDestination.registerHealthIndicator= true
resilience4j.circuitbreaker.instances.travelDestination.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.travelDestination.failureRateThreshold= 60
resilience4j.circuitbreaker.configs.default.minimumNumberOfCalls= 10
#The minimum number of calls required before the circuit breaker can calculate the failure rate or slow call rate.
resilience4j.circuitbreaker.instances.travelDestination.minimum-number-of-calls=20
resilience4j.circuitbreaker.instances.travelDestination.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.travelDestination.waitDurationInOpenState= 30000
#Number of permitted calls when the circuit breaker is half-open to test if the circuit can be closed again.
resilience4j.circuitbreaker.instances.travelDestination.permitted-number-of-calls-in-half-open-state=5
#Size of the sliding window for measuring call outcomes. If count-based, this is the number of calls; if time-based, this is the number of time units.
resilience4j.circuitbreaker.instances.travelDestination.sliding-window-size=5
# Defines whether the sliding window is count-based or time-based. Possible values: COUNT_BASED ,TIME_BASED
resilience4j.circuitbreaker.instances.travelDestination.sliding-window-type=COUNT_BASED


#Rate Limit Properties

resilience4j.ratelimiter.instances.travelAttractions.timeout-duration=2s
#Defines the maximum number of calls (2 requests) that can be executed within a limitRefreshPeriod.
resilience4j.ratelimiter.instances.travelAttractions.limitForPeriod=2
#The interval after which the rate limiter's permissions are refreshed
resilience4j.ratelimiter.instances.travelAttractions.limitRefreshPeriod=10s
resilience4j.ratelimiter.instances.travelAttractions.registerHealthIndicator=true
resilience4j.ratelimiter.instances.travelAttractions.subscribeForEvents=true


